* Structure 
** Base
*** Hash
* Log
  :PROPERTIES:
  :ID:       b4eabd2c-9602-4a82-9373-fe6d3899e498
  :END:
** DONE Research Python organization 
       DEADLINE: <2016-04-25 Mon>
       CLOCK: [2016-04-25 Mon 16:37]--[2016-04-25 Mon 17:25] =>  0:48
- Read article found here: http://docs.python-guide.org/en/latest/writing/structure/
** DONE Produce absolute Levenshtein distance algorithm implement
       DEADLINE: <2016-04-26 Tue>
       CLOCK: [2016-04-25 Mon 19:34]--[2016-04-25 Mon 20:35] =>  0:55
- Either by hand or some module
- Using python-Levenshtein
*** TODO Review python-Levenshtein source (David Necas, 2002)
        DEADLINE: <2016-04-26 Tue>
        CLOCK: [2016-04-25 Mon 17:25]--[2016-04-25 Mon 17:50] =>  0:25
- Levenshtein distance implement python module. Written in C.
** DONE Create python project, first commit to git
       DEADLINE: <2016-04-25 Mon>
       CLOCK: [2016-04-25 Mon 18:10]--[2016-04-25 Mon 18:16] =>  0:06
       CLOCK: [2016-04-25 Mon 22:33]--[2016-04-25 Mon 23:50] =>  1:17
- Project structure based on python sample structure from kenneth reitz: https://github.com/kennethreitz/samplemod
- docs generated with Sphinx
*** DONE Review Sphinx python documentation generator. Produce docs directory.
        DEADLINE: <2016-04-25 Mon>
        CLOCK: [2016-04-25 Mon 19:23]--[2016-04-25 Mon 20:01] =>  0:38
- Source: http://www.sphinx-doc.org/en/stable/tutorial.html
** DONE Research Python Distribution Utilities
   DEADLINE: <2016-04-27 Wed>
   CLOCK: [2016-04-27 Wed 20:42]--[2016-04-27 Wed 21:17] =>  0:35
- Python Distribution Utilities, aka "Disutils"
  - responsibilities: 
    1. write setup script setup.py
    2. a setup configuration file
** DONE Research Nose Python testing framework
   DEADLINE: <2016-04-28 Thu>
   CLOCK: [2016-04-29 Thu 13:51]--[2016-04-29 Fri 15:03] =>  1:12
- Use for unit tests for classes, methods and modules

** DONE Research SHA1 Hashing
   DEADLINE: <2016-04-29 Fri>
   CLOCK: [2016-04-29 Fri 17:55]--[2016-04-29 Fri 18:25] =>  0:30
- Secure Hash Algorithm
- cryptographic hash
- produces a 20-byte hash value called the "message digest"
- typically rendered as a 40-digit hexademical number
*** Hash functions
Have four main properties:
**** it is quick to compute the hash value for any given message
     This is very important for leven-squash
**** it is infeasible to generate a message from its hash value except by trying all possible messages
**** a small change to a message should change the hash value so extensively that the new hash value appears uncorrelated with the old hash value
**** it is infeasible to find two different messages with the same hash value
     This is very important for leven-squash

** DONE Research Python hash library
   DEADLINE: <2016-04-30 Sat>
   CLOCK: [2016-04-30 Sat 21:35]--[2016-04-30 Sat 22:14] =>  0:39
   CLOCK: [2016-04-30 Sat 19:05]--[2016-04-30 Sat 19:11] =>  0:06
- library source: https://hg.python.org/cpython/file/2.7/Lib/hashlib.py
- hashlib
- the documentation can be found here: https://docs.python.org/2/library/hashlib.html#module-hashlib
- As per the library source, named constructors are faster implementations are much faster than using new()

** TODO Create levenstein source base structure
   DEADLINE: <2016-05-01 Sun>
   CLOCK: [2016-04-30 Sat 20:00]--[2016-04-30 Sat 20:33] =>  0:33
   CLOCK: [2016-04-29 Fri 18:26]--[2016-04-29 Fri 19:47] =>  1:21 
** DONE Look into Python exception handling mechanisms
   DEADLINE: <2016-04-30 Sat>
   CLOCK: [2016-04-30 Sat 20:34]--[2016-04-30 Sat 20:57] =>  0:23
- Read here: https://docs.python.org/2/tutorial/errors.html
** DONE Reread compression heuristic blog post
   DEADLINE: <2016-04-30 Sat>
   CLOCK: [2016-04-30 Sat 02:49]--[2016-04-30 Sat 03:06] =>  0:17
   CLOCK: [2016-04-30 Sat 01:57]--[2016-04-30 Sat 02:16] =>  0:19
** DONE Look over sample unit tests in Levenstein implementation
   DEADLINE: <2016-04-29 Fri>
   CLOCK: [2016-04-29 Fri 21:15]--[2016-04-29 Fri 22:47] =>  1:32
** DONE Look over Java MessageDigest API
   DEADLINE: <2016-04-30 Sat>
   CLOCK: [2016-04-30 Sat 18:35]--[2016-04-30 Sat 18:40] =>  0:05
- This MessageDigest class provides applications the functionality of a message digest algorithm, such as SHA-1 or SHA-256.
- MessageDigest.getInstance() throws a NoSuchAlgorithm exception. 
** DONE Code compression.py
   DEADLINE: <2016-04-30 Sat>
   CLOCK: [2016-04-30 Sat 23:15]--[2016-05-01 Sun 00:09] =>  0:54
- compression.py contains the basic functionality for performing variable compressions on data.
*** DONE Lookup Python set()
    CLOCK: [2016-04-30 Sat 23:16]--[2016-04-30 Sat 23:24] =>  0:08
*** DONE Lookup Python raise
    CLOCK: [2016-04-30 Sat 23:34]--[2016-04-30 Sat 23:35] =>  0:01

** TODO Write benchmark tests for compression.py
   DEADLINE: <2016-05-01 Sun>
   CLOCK: [2016-05-01 Sun 01:14]--[2016-05-01 Sun 01:51] =>  0:37
** DONE Look up Python timers
   CLOCK: [2016-05-01 Sun 02:51]--[2016-05-01 Sun 03:47] =>  0:56
- time.clock() is preferred for performance measurement as a basic time wrapper
- timeit.Timer() is a very good module for benchmarking a function.
** DONE Write a unit test for compression.py
   DEADLINE: <2016-05-02 Mon>
   CLOCK: [2016-05-02 Mon 19:06]--[2016-05-02 Mon 19:26] =>  0:20
   CLOCK: [2016-05-02 Mon 03:17]--[2016-05-02 Mon 03:56] =>  0:39
** DONE __init__.py and importing package modules
   CLOCK: [2016-05-02 Mon 20:32]--[2016-05-02 Mon 20:45] =>  0:13

** DONE Look at Exception class
   CLOCK: [2016-05-02 Mon 20:46]--[2016-05-02 Mon 21:26] =>  0:40
*** DONE Check out raise again
    CLOCK: [2016-05-02 Mon 20:52]--[2016-05-02 Mon 21:26] =>  0:34
- http://stackoverflow.com/questions/13957829/how-to-use-raise-keyword-in-python

** DONE Fix bug in unit test for compression.py
   CLOCK: [2016-05-02 Mon 22:34]--[2016-05-02 Mon 22:52] =>  0:18
- why is raise not working?
#+begin_src emacs-lisp
    def test_construction(self):
        print("TestCompression:test_construction to test Compressor")

        c = Compressor()

        try:
            print("Compressor.getN(): " + c.getN())
            print("Compressor.getC(): " + c.getC())
        except Exception as e:
            print("Print error: " + str(e))
#            raise e
#+end_src
** DONE Look into Python inheritance and polymorphism semantics/syntax
   CLOCK: [2016-05-03 Tue 00:06]--[2016-05-03 Tue 00:09] =>  0:03
** DONE Investigate Python logger module
   CLOCK: [2016-05-03 Tue 00:09]--[2016-05-03 Tue 00:35] =>  0:26
- https://docs.python.org/2/library/logging.html   
** DONE Add basic compressor to compression.py to generate signatures
   DEADLINE: <2016-05-03 Tue>
   CLOCK: [2016-05-03 Tue 12:08]--[2016-05-03 Tue 01:10] => 1:02
- added base code. Completely untested.
** DONE Locate module for easily building python strings (which are immutable, of course)
   DEADLINE: <2016-05-03 Tue>
   CLOCK: [2016-05-03 Tue 01:11]--[2016-05-03 Tue 01:33] =>  0:22
- Strings in Python are immutable. So a module like Java's StringBuilder is what's needed.
- just use join, it's not that much slower
** DONE Debug compressor.py
   DEADLINE: <2016-05-03 Tue>
   CLOCK: [2016-05-09 Mon 01:35]--[2016-05-09 Mon 02:04] =>  0:29
   CLOCK: [2016-05-09 Mon 00:45]--[2016-05-09 Mon 01:11] =>  0:26
   CLOCK: [2016-05-09 Mon 00:24]--[2016-05-09 Mon 00:36] =>  0:12
   CLOCK: [2016-05-04 Wed 08:40]--[2016-05-04 Wed 08:55] =>  0:15
   CLOCK: [2016-05-03 Tue 20:40]--[2016-05-03 Tue 20:56] =>  0:16
   CLOCK: [2016-05-03 Tue 16:53]--[2016-05-03 Tue 16:54] =>  0:01
   CLOCK: [2016-05-03 Tue 16:30]--[2016-05-03 Tue 16:48] =>  0:18
- NameError: global name 'compress_alt' is not defined being thrown with nosetests
- Compressed output is for some reason a single character in length. Have to figure out this bug
- concerned that python's dynamic handling of int/long sizes is a problem
- Bug located: improper use of python's join method for sequences. There was a bit of misdirection around python's dynamic handling of primitive integer types
** DONE Find large text strings for test data
   CLOCK: [2016-05-09 Mon 00:11]--[2016-05-09 Mon 00:22] =>  0:11
- created leven-squash/data directory with Gutenburg books as sample documents
** DONE Troubleshoot nosetests bug
   CLOCK: [2016-05-09 Mon 00:36]--[2016-05-09 Mon 00:44] =>  0:08
- having trouble targeting a single module, probably a dumb mistake. 
- was making an unfortunate syntatical mistake. Need to be careful with absolute paths
- http://nose.readthedocs.io/en/latest/usage.html
** DONE Look back at compression heuristic C and N characteristics
   CLOCK: [2016-05-09 Mon 01:13]--[2016-05-09 Mon 01:27] =>  0:14
** TODO Unit test StringCompressorBasic
   DEADLINE: <2016-05-03 Tue>
   CLOCK: [2016-05-09 Mon 02:56]--[2016-05-09 Mon 03:57] =>  1:01
- improve the test now that the compressor module is in at least working order
** TODO Try to get Python shell working in emacs
   CLOCK: [2016-05-03 Tue 13:47]--[2016-05-03 Tue 13:59] =>  0:12
** DONE Range vs xrange in Python
   CLOCK: [2016-05-03 Tue 16:20]--[2016-05-03 Tue 16:26] =>  0:06
- range generates a list conprised of the range, while xrange produces elements as needed, and so is space efficient if a loop is likely to exit abruptly.
** DONE Configure Python environment for emacs to support autocompletion and documentation
   DEADLINE: <2016-05-03 Tue>
   CLOCK: [2016-05-03 Tue 17:46]--[2016-05-03 Tue 18:08] =>  0:22
- current python environment is okay, but there are some problems that are making it much more laborous than it should be: autocompletion and lack of easy documentation access.

+ enabled jedi-company in emacs config for autocompletion popups and documentation access.
** TODO Add Python project navigation functionality to emacs
   DEADLINE: <2016-05-03 Tue>
   CLOCK: [2016-05-03 Tue 19:51]--[2016-05-03 Tue 20:11] =>  0:20
- currently stuff definition lookup is confined to working file.
** DONE check join() 
   CLOCK: [2016-05-09 Mon 01:56]--[2016-05-09 Mon 02:03] =>  0:07
- right, so I have been misusing python's join() function to devastating effect
** TODO Revise current test module for compression.py
   DEADLINE: <2016-05-09 Mon>
- clean the code
- think of a way to improve the testing output
** TODO Investigate proper polymorhphism practice in Python
   DEADLINE: <2016-05-09 Mon>
- the need for this is mainly apparent right now in the testing modules, but it's obviously generally very important
** TODO Clean StringCompressorBasic
   DEADLINE: <2016-05-09 Mon>
- There are various comments to be addressed in the current code
* Tasks [0/1]
** TODO Why are the named constructors for hashlib much faster than using new?
   DEADLINE: <2016-05-01 Sun>
"A generic new() constructor that takes the string name of the desired
algorithm as its first parameter also exists to allow access to the
above listed hashes as well as any other algorithms that your OpenSSL
library may offer. The named constructors are much faster than new()
and should be preferred."

- Take from https://docs.python.org/2/library/hashlib.html#module-hashlib

** TODO Run benchmark tests on hashlib constructors vs new()
   DEADLINE: <2016-04-30 Sat>
** TODO 
